#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

# Simple Regex
require 'regexp_ast.rb'


class RegexpSimple < Racc::Parser

module_eval(<<'...end regexp_nfa.y/module_eval...', 'regexp_nfa.y', 20)
  def parse(str)
    @q = []
    str = str.gsub(/(H|L){(\d+)}/) do
      $1 * $2.to_i
    end
    until str.empty?
      case str[0]
      when ' '
      when 'H'
        @q.push [:ALPHABET, 'H']
      when 'L'
        @q.push [:ALPHABET, 'L']
      when '*'
        @q.push ['*', '*']
      when '('
        @q.push ['(', '(']
      when ')'
        @q.push [')', ')']
      end
      str = str[1..-1]
    end
    @q.push [false, '$end']
    do_parse
  end

  def next_token
    @q.shift
  end

...end regexp_nfa.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     8,     4,    11,     5,     8,     4,     6,     5,     8,     4,
     4,     5,     5,     4,    10,     5 ]

racc_action_check = [
     9,     9,     9,     9,     7,     7,     1,     7,     2,     2,
     4,     2,     4,     0,     6,     0 ]

racc_action_pointer = [
    10,     6,     6,   nil,     7,   nil,    14,     2,   nil,    -2,
   nil,   nil ]

racc_action_default = [
    -2,    -8,    -1,    -5,    -8,    -7,    -8,    -4,    -3,    -8,
    12,    -6 ]

racc_goto_table = [
     2,     1,   nil,   nil,     9 ]

racc_goto_check = [
     2,     1,   nil,   nil,     2 ]

racc_goto_pointer = [
   nil,     1,     0,   nil ]

racc_goto_default = [
   nil,   nil,     7,     3 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 7, :_reduce_none,
  0, 7, :_reduce_2,
  2, 8, :_reduce_3,
  2, 8, :_reduce_4,
  1, 8, :_reduce_none,
  3, 9, :_reduce_6,
  1, 9, :_reduce_7 ]

racc_reduce_n = 8

racc_shift_n = 12

racc_token_table = {
  false => 0,
  :error => 1,
  "*" => 2,
  "(" => 3,
  ")" => 4,
  :ALPHABET => 5 }

racc_nt_base = 6

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"*\"",
  "\"(\"",
  "\")\"",
  "ALPHABET",
  "$start",
  "target",
  "exp",
  "primary" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'regexp_nfa.y', 3)
  def _reduce_2(val, _values, result)
     result = 0 
    result
  end
.,.,

module_eval(<<'.,.,', 'regexp_nfa.y', 5)
  def _reduce_3(val, _values, result)
     result = StarNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'regexp_nfa.y', 6)
  def _reduce_4(val, _values, result)
     result = ConcatNode.new(val[0],val[1]) 
    result
  end
.,.,

# reduce 5 omitted

module_eval(<<'.,.,', 'regexp_nfa.y', 9)
  def _reduce_6(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'regexp_nfa.y', 10)
  def _reduce_7(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class RegexpSimple


