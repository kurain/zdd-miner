#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

# Simple Regex
require 'regexp_ast.rb'


class RegexpSimple < Racc::Parser

module_eval(<<'...end regexp_nfa.y/module_eval...', 'regexp_nfa.y', 18)
  def parse(str)
    @q = []
    until str.empty?
      case str[0]
      when ' '
      when 'H'
        @q.push [:ALPHABET, 'H']
      when 'L'
        @q.push [:ALPHABET, 'L']
      when '*'
        @q.push ['*', '*']
      end
      str = str[1..-1]
    end
    @q.push [false, '$end']
    do_parse
  end

  def next_token
    @q.shift
  end

...end regexp_nfa.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     6,     3,     6,     3,     4,     7,     3 ]

racc_action_check = [
     5,     5,     2,     2,     1,     4,     0 ]

racc_action_pointer = [
     3,     4,     0,   nil,     5,    -2,   nil,   nil ]

racc_action_default = [
    -2,    -6,    -1,    -5,    -6,    -3,    -4,     8 ]

racc_goto_table = [
     1,     2 ]

racc_goto_check = [
     1,     2 ]

racc_goto_pointer = [
   nil,     0,     1 ]

racc_goto_default = [
   nil,   nil,     5 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 5, :_reduce_none,
  0, 5, :_reduce_2,
  2, 6, :_reduce_3,
  2, 6, :_reduce_4,
  1, 6, :_reduce_5 ]

racc_reduce_n = 6

racc_shift_n = 8

racc_token_table = {
  false => 0,
  :error => 1,
  "*" => 2,
  :ALPHABET => 3 }

racc_nt_base = 4

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"*\"",
  "ALPHABET",
  "$start",
  "target",
  "exp" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'regexp_nfa.y', 4)
  def _reduce_2(val, _values, result)
     result = 0 
    result
  end
.,.,

module_eval(<<'.,.,', 'regexp_nfa.y', 6)
  def _reduce_3(val, _values, result)
     result = ConcatNode.new(val[0],val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'regexp_nfa.y', 7)
  def _reduce_4(val, _values, result)
     result = StarNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'regexp_nfa.y', 8)
  def _reduce_5(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class RegexpSimple


